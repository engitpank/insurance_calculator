**Контекст задачи (краткое описание) **
Как работает дизайн паттерн Inversion of Control (IoC)?
Управление выполнением программы (например, создание зависимостей, управление потоком выполнения) передается внешнему механизму (фреймворку, контейнеру или другому компоненту).
С точки зрения кода, компоненты системы не управляют своими зависимостями напрямую, а работают через абстракции, что делает их изолированными от конкретных реализаций других компонентов.

DI - dependency injection - одна из реализаций IoC, при которой зависимости внедряются в компонент извне.
1. Мой фаворит - через конструктор:
+ Все обязательные зависимости будут переданы в момент инициализации объекта;
+ Хорошее влияние на тестирование: добавление \ изменение зависимостей потребует внесение изменений в тесте
- Громозкость конструктора при большом количестве зависимостей.
2. через set метод:
+ Возможность валидировать зависимость;
+ Возможность заменять зависимости после создания объекта;
- Можно забыть внедрить зависимость;
- В тестах необходимо отслеживать изменения списка необязательных зависимостей.
3. Через свойство объекта:
- Ссылки на зависимости могут быть не контролируемо изменены извне.
- Ещё сложнее отслеживать изменения списка зависимостей;
4. Через аннотации:
+ Просто и удобно, особенно в тестах;
- Зависимость от фреймворка;

Рекомендованные линки для изучения:
https://martinfowler.com/articles/injection.html
https://odrotbohm.de/2013/11/why-field-injection-is-evil/
https://www.baeldung.com/constructor-injection-in-spring
https://livebook.manning.com/book/dependency-injection/chapter-1/

